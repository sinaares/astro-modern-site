---
// components/FeatureItem.astro
export interface Props {
  title: string;
  description: string;
  icon: string;
}

const { title, description, icon } = Astro.props;

// Declare the counter on the global type to satisfy TypeScript
declare global {
  var __featureCounter: number | undefined;
}

// Initialize if not already
if (globalThis.__featureCounter === undefined) globalThis.__featureCounter = 0;
globalThis.__featureCounter++;

// Decide type automatically: odd/even sequence
const type =
  globalThis.__featureCounter % 2 === 0 ? "feature-down" : "feature-up";
---

<div class={`feature-item ${type}`}>
  <div class="feature-icon">
    <svg fill="currentColor" viewBox="0 0 24 24" set:html={icon} />
  </div>
  <h4>{title}</h4>
  <p>{description}</p>
</div>

<style>
  .feature-item {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1rem;
    padding: 2rem 1.5rem;
    transition: all 0.3s ease;
  }

  .feature-up {
    transform: translateY(20px);
  }

  .feature-down {
    transform: translateY(20px);
  }

  .feature-item:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  .feature-icon {
    width: 64px;
    height: 64px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
    transition: all 0.3s ease;
  }

  .feature-icon svg {
    width: 28px;
    height: 28px;
    color: white;
  }

  .feature-item:hover .feature-icon {
    transform: scale(1.1);
    background: rgba(255, 255, 255, 0.3);
  }

  .feature-item h4 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .feature-item p {
    color: rgba(255, 255, 255, 0.8);
    line-height: 1.6;
  }

  @media (max-width: 1024px) {
    .feature-up,
    .feature-down {
      transform: translateY(0);
    }
  }
</style>
