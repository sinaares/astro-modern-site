---
// src/components/Contact.astro
import ContactHeader from "./Contact/ContactHeader.astro";
import ContactInfo from "./Contact/ContactInfo.astro";
import ContactForm from "./Contact/ContactForm.astro";
import ContactMap from "./Contact/ContactMap.astro";

// Destructure all props, including contactItems
const {
  titleHeader,
  lead,
  email,
  phone,
  location,
  mapLocation,
  titleForm,
  questionSection = [],
  titleInfo,
  contactItems = [
    // fallback if not provided
    { type: "email", value: email, icon: "‚úâÔ∏è" },
    { type: "phone", value: phone, icon: "üì±" },
    { type: "location", value: location, icon: "üìç" },
  ],
} = Astro.props;
---

<section id="contact" class="contact">
  <div class="contact-container">
    <ContactHeader title={titleHeader} lead={lead} />

    <div class="contact-grid">
      <!-- Left: Contact info -->
      <div class="form-block">
        <ContactInfo titleInfo={titleInfo} contactItems={contactItems} />
      </div>

      <!-- Right: Form -->
      <div class="form-block">
        <ContactForm title={titleForm} questions={questionSection} />
      </div>
    </div>

    <!-- Bottom: Map -->
    <div class="map-block">
      <ContactMap mapLocation={mapLocation} />
    </div>
  </div>
</section>

<style>
  .contact {
    padding: 6rem 0;
    background: #f8fafc;
  }

  .contact-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .contact-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 3rem;
    margin-bottom: 4rem;
  }

  .form-block {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .map-block {
    width: 100%;
  }

  @media (max-width: 768px) {
    .contact {
      padding: 4rem 0;
    }

    .contact-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(
      "contact-form"
    ) as HTMLFormElement | null;

    if (!form) return;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const submitBtn = form.querySelector('button[type="submit"]');

      if (submitBtn instanceof HTMLButtonElement) {
        submitBtn.disabled = true;
        submitBtn.textContent = "G√∂nderiliyor...";
      }
      try {
        const formData = new FormData(form);
        const response = await fetch(
          "https://formsubmit.co/ajax/sina.ares85@gmail.com",
          {
            method: "POST",
            body: formData,
          }
        );

        if (response.ok) {
          alert("Mesaj ba≈üarƒ±yla g√∂nderildi!");
          form.reset();
        } else {
          alert("Bir hata olu≈ütu. L√ºtfen tekrar deneyin.");
        }
      } catch (error) {
        alert("Bir hata olu≈ütu. L√ºtfen tekrar deneyin.");
      } finally {
        if (submitBtn instanceof HTMLButtonElement) {
          submitBtn.disabled = false;
          submitBtn.textContent = "G√∂nder";
        }
      }
    });
  });
</script>
